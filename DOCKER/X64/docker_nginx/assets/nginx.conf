user www-data;
worker_processes auto;

worker_rlimit_nofile 100000;

error_log /var/log/nginx/error.log crit;
pid /run/nginx.pid;

events {
    worker_connections 4000;
    use epoll;
    multi_accept on;
}


http {

     map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }
    # cache informations about FDs, frequently accessed files
    # can boost performance, but you need to test those values
    open_file_cache max=200000 inactive=20s; 
    open_file_cache_valid 30s; 
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # copies data between one FD and other from within the kernel
    # faster then read() + write()
    sendfile on;
    
    # reduce the data that needs to be sent over network -- for testing environment
    gzip on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/json application/xml;
    gzip_disable msie6;

    # allow the server to close connection on non responding client, this will free up memory
    reset_timedout_connection on;

    # request timed out -- default 60
    client_body_timeout 10;

    # if client stop responding, free up memory -- default 60
    send_timeout 2;

    # server will close connection after this time -- default 75
    keepalive_timeout 30;

    # number of requests client can make over keep-alive -- for testing environment
    keepalive_requests 100000;


    # Enumerate all the Tornado servers here
    upstream frontends {
        server push:8889;
    }

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    access_log /var/log/nginx/access.log;

    proxy_read_timeout 200;
    tcp_nopush on;
    tcp_nodelay on;

    # Only retry if there was a communication error, not a timeout
    # on the Tornado server (to avoid propagating "queries of death"
    # to all frontends)
    proxy_next_upstream error;
    
    # lets limit push requests to 20 req/sec
    #limit_req_zone $binary_remote_addr zone=pushlimit:10m rate=20r/s;

    server {
        listen 8887;

        # Allow file uploads
        client_max_body_size 50M;

        location ^~ /static/ {
            root /var/www;
            if ($query_string) {
                expires max;
            }
        }
        location = /favicon.ico {
            rewrite (.*) /static/favicon.ico;
        }
        location = /robots.txt {
            rewrite (.*) /static/robots.txt;
        }

	location / {
	    proxy_pass_header Server;
	    proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Scheme $scheme;
	    proxy_set_header Host $http_host;
            proxy_set_header X-NginX-Proxy true;
            proxy_pass http://frontends;
	    proxy_redirect off;
	}
        location /push {
	    #limit_req zone=pushlimit;
	    proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Scheme $scheme;
	    proxy_set_header Host $http_host;
            proxy_set_header X-NginX-Proxy true;
            proxy_pass http://frontends;
	    proxy_redirect off;
        }
	location /register {
	    proxy_http_version 1.1;
	    proxy_redirect off;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Scheme $scheme;
            proxy_pass http://frontends;
	    proxy_set_header Upgrade $http_upgrade;
	    proxy_set_header Connection $connection_upgrade;
	}
    }
}